import telebot
from config import TELEGRAM_TOKEN_2, CRYPTO_PAIR, TIMEFRAME, DATA_FILE, TARGET_TIMEZONE, LOG_FILE
from logger import logger
from data_handler import load_data
import time

bot = telebot.TeleBot(TELEGRAM_TOKEN_2)
chat_id = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —á–∞—Ç–∞

last_cross_time = None
last_entry_price = None
atr_at_entry = None

def send_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫."""
    global chat_id
    if chat_id:
        try:
            bot.send_message(chat_id, message)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {message}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}", exc_info=True)
    else:
        logger.warning("ID —á–∞—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

@bot.message_handler(commands=['start'])
def start_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    global chat_id
    chat_id = message.chat.id

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

    bot.send_message(chat_id, f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {CRYPTO_PAIR} –Ω–∞ {TIMEFRAME} —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ –Ω–∞—á–∞—Ç!")
    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")

@bot.message_handler(commands=['status'])
def status_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    global chat_id
    if chat_id is None:
        chat_id = message.chat.id  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º chat_id, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç

    df = load_data()
    if df.empty:
        bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return

    try:
        current_price = df.iloc[-1]["close"]
        last_cross = "–ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π"
        last_entry = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤"

        if last_cross_time:
            last_cross = f"{last_cross_time} (SMA-50 {'–≤—ã—à–µ' if last_entry_price else '–Ω–∏–∂–µ'} SMA-200)"

        if last_entry_price is not None and atr_at_entry is not None:
            level_up = last_entry_price + 3 * atr_at_entry
            level_down = last_entry_price - 1 * atr_at_entry
            last_entry = (
                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {last_entry_price:.4f}\n"
                f"3ATR: {level_up:.4f}\n"
                f"-1ATR: {level_down:.4f}"
            )

        message_text = (
            f"üìä *–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:*\n"
            f"–ü–∞—Ä–∞: {CRYPTO_PAIR}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: {last_cross}\n"
            f"{last_entry}"
        )

        bot.send_message(chat_id, message_text, parse_mode="Markdown")
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

@bot.message_handler(commands=['help'])
def help_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/config - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
    )
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ /help")

@bot.message_handler(commands=['config'])
def config_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    config_text = (
        "‚öô *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:*\n"
        f"üìå –ü–∞—Ä–∞: `{CRYPTO_PAIR}`\n"
        f"üïí –¢–∞–π–º—Ñ—Ä–µ–π–º: `{TIMEFRAME}`\n"
        f"üìÇ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: `{DATA_FILE}`\n"
        f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{TARGET_TIMEZONE}`\n"
        f"üìù –§–∞–π–ª –ª–æ–≥–æ–≤: `{LOG_FILE}`"
    )
    bot.send_message(message.chat.id, config_text, parse_mode="Markdown")
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π /config")

if __name__ == "__main__":
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ bot.polling()...")
            bot.polling(non_stop=True, interval=0.5, timeout=20)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ bot.polling(): {e}", exc_info=True)
            time.sleep(15)  # –ñ–¥—ë–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º